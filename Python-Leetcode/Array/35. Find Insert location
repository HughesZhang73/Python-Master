# conding = utf-8


def searchInsert(nums, target: int) -> int:
    if target in nums:
        return nums.index(target)
    else:
        nums.append(target)
        new = sorted(nums)
        return new.index(target)


# 执行速度最快
# class Solution:
#     def searchInsert(self, nums: List[int], target: int) -> int:
#         low = 0
#         high = len(nums) - 1
#         while low <= high:
#             mid = (low + high) // 2
#
#             if nums[mid] > target:
#                 high = mid - 1
#             elif nums[mid] < target:
#                 low = mid + 1
#             else:
#                 # 找到了，答案是mid，
#                 # 构造 low = mid, high = mid - 1
#                 # 使 low < high 不成立退出循环，同时返回答案low
#                 low = mid
#                 high = mid - 1
#
#         return low

if __name__ == '__main__':
    print(searchInsert([1, 3, 5, 6], 2))